### ----- Examine data ----- ###
ggplot(aapl.c, aes(time(aapl.c), as.matrix(aapl.c))) + geom_line() +
ylab(global.ylab) +
xlab(global.xlab) +
ggtitle(names(aapl.c))
### ----- Examine data ----- ###
ggplot(aapl.c, aes(time(aapl.c), as.matrix(aapl.c))) + geom_line(colour = 'red') +
ylab(global.ylab) +
xlab(global.xlab) +
ggtitle(names(aapl.c))
global.xlab <<- 'Date'
### ----- Examine data ----- ###
ggplot(aapl.c, aes(time(aapl.c), as.matrix(aapl.c))) + geom_line(colour = 'red') +
ylab(global.ylab) +
xlab(global.xlab) +
ggtitle(names(aapl.c))
global.ylab <<- 'Closing Price ($)'
### ----- Examine data ----- ###
ggplot(aapl.c, aes(time(aapl.c), as.matrix(aapl.c))) + geom_line(colour = 'red') +
ylab(global.ylab) +
xlab(global.xlab) +
ggtitle(names(aapl.c))
global.xlab <<- 'Date (yy-mm-dd)'
### ----- Examine data ----- ###
ggplot(aapl.c, aes(time(aapl.c), as.matrix(aapl.c))) + geom_line(colour = 'red') +
ylab(global.ylab) +
xlab(global.xlab) +
ggtitle(names(aapl.c))
global.xlab <<- 'Date (yyyy-mm-dd)'
### ----- Examine data ----- ###
ggplot(aapl.c, aes(time(aapl.c), as.matrix(aapl.c))) + geom_line(colour = 'red') +
ylab(global.ylab) +
xlab(global.xlab) +
ggtitle(names(aapl.c))
chartSeries(stock.data, theme = "white", name = stockname)
acf(aapl.c)
pacfPlot(aapl.c)
pacfPlot(aapl.c)
acfPlot(aapl.c)
?acfPlot
acfPlot(aapl.c)
adf.test(aapl.c)
kpss.test(aapl.c)
kpss.test(aapl.c, null = c("Level", "Trend"))
kpss.test(aapl.c, null = "Trend")
### ----- Examine data ----- ###
# plot closing price
ggplot(aapl.c, aes(time(aapl.c), as.matrix(aapl.c))) + geom_line(colour = 'red') +
ylab(global.ylab) +
xlab(global.xlab) +
ggtitle(names(aapl.c))
adf.test(aapl.c)
kpss.test(aapl.c, null = "Trend")
kpss.test(aapl.c, null = "Level")
pp.test(aapl.c)
acfPlot(aapl.c)
pacfPlot(aapl.c)
adf.test(aapl.c)
kpss.test(aapl.c, null = "Trend")
kpss.test(aapl.c, null = "Level")
pp.test(aapl.c)
### ----- Examine data ----- ###
# plot closing price
ggplot(aapl.c, aes(time(aapl.c), as.matrix(aapl.c))) + geom_line(colour = 'red') +
ylab(global.ylab) +
xlab(global.xlab) +
ggtitle(names(aapl.c))
### ----- Data transformation ----- ###
aapl.log <- BoxCox(aapl.c, 0)
ggplot(aapl.log, aes(time(aapl.log), as.matrix(aapl.log))) + geom_line(colour = 'red') +
ylab(global.ylab) +
xlab(global.xlab) +
ggtitle(names(aapl.c))
# test stationarity
acfPlot(aapl.log)
pacfPlot(aapl.log)
adf.test(aapl.log)
kpss.test(aapl.log, null = "Trend")
kpss.test(aapl.log, null = "Level")
pp.test(aapl.log)
ggplot(aapl.log, aes(time(aapl.log), as.matrix(aapl.log))) + geom_line(colour = 'red') +
ylab(global.ylab) +
xlab(global.xlab) +
ggtitle(names(aapl.c))
### ----- Data transformation ----- ###
global.ylab <- 'Log Closing Price ($)'
aapl.log <- BoxCox(aapl.c, 0)
ggplot(aapl.log, aes(time(aapl.log), as.matrix(aapl.log))) + geom_line(colour = 'red') +
ylab(global.ylab) +
xlab(global.xlab) +
ggtitle(names(aapl.c))
# first-order difference
aapl.df <- diff(aapl.log)
# first-order difference
global.ylab <- 'Closing Price after logarithm and first-order diff ($)'
aapl.df <- diff(aapl.log)
ggplot(aapl.df, aes(time(aapl.log), as.matrix(aapl.log))) + geom_line(colour = 'red') +
ylab(global.ylab) +
xlab(global.xlab) +
ggtitle(names(aapl.c))
# test stationarity
acfPlot(aapl.df)
pacfPlot(aapl.df)
# first-order difference
global.ylab <- 'Closing Price after logarithm and first-order diff ($)'
aapl.df <- diff(aapl.log)
View(aapl.df)
aapl.df <- na.omit(aapl.df) # remove possible na values
ggplot(aapl.df, aes(time(aapl.log), as.matrix(aapl.log))) + geom_line(colour = 'red') +
ylab(global.ylab) +
xlab(global.xlab) +
ggtitle(names(aapl.c))
View(aapl.df)
ggplot(aapl.df, aes(time(aapl.df), as.matrix(aapl.df))) + geom_line(colour = 'red') +
ylab(global.ylab) +
xlab(global.xlab) +
ggtitle(names(aapl.c))
# test stationarity
acfPlot(aapl.df)
pacfPlot(aapl.df)
adf.test(aapl.df)
kpss.test(aapl.df, null = "Trend")
kpss.test(aapl.df, null = "Level")
pp.test(aapl.df)
ggplot(aapl.df, aes(time(aapl.df), as.matrix(aapl.df))) + geom_line(colour = 'red') +
ylab(global.ylab) +
xlab(global.xlab) +
ggtitle(names(aapl.c))
ggplot(aapl.log, aes(time(aapl.log), as.matrix(aapl.log))) + geom_line(colour = 'red') +
ylab(global.ylab) +
xlab(global.xlab) +
ggtitle(names(aapl.c))
ggplot(aapl.c, aes(time(aapl.c), as.matrix(aapl.c))) + geom_line(colour = 'red') +
ylab(global.ylab) +
xlab(global.xlab) +
ggtitle(names(aapl.c))
# QQ Plot
qqnorm(aapl.df)
qqline(aapl.df, col = 2)
skewness(aapl.df); kurtosis(aapl.df)
skewness(aapl.df)
kurtosis(aapl.df)
### ----- Data transformation ----- ###
# transform to log-returns
title <- 'Log-returns*100 on AAPL Closing Prices (2002.02-2017.02)'
global.ylab <- 'Log-returns*100'
aapl.logr <- diff(log(aapl.c))*100
ggplot(aapl.logr, aes(time(aapl.logr), as.matrix(aapl.logr))) + geom_line(colour = 'red') +
ylab(global.ylab) +
xlab(global.xlab) +
ggtitle(title)
# test stationarity
acfPlot(aapl.logr)
aapl.logr <- na.omit(aapl.logr) # remove possible na values
ggplot(aapl.logr, aes(time(aapl.logr), as.matrix(aapl.logr))) + geom_line(colour = 'red') +
ylab(global.ylab) +
xlab(global.xlab) +
ggtitle(title)
# test stationarity
acfPlot(aapl.logr)
pacfPlot(aapl.logr)
adf.test(aapl.logr)
kpss.test(aapl.logr, null = "Trend")
kpss.test(aapl.logr, null = "Level")
pp.test(aapl.logr)
# test stationarity
acfPlot(aapl.logr)
### ----- Data transformation ----- ###
# transform to log-returns
global.ylab <- 'Log-returns*100'
aapl.logr <- diff(log(aapl.c))*100
aapl.logr <- na.omit(aapl.logr) # remove possible na values
names(aapl.logr) <- 'Log-returns*100 on AAPL Closing Prices (2002.02-2017.02)'
ggplot(aapl.logr, aes(time(aapl.logr), as.matrix(aapl.logr))) + geom_line(colour = 'red') +
ylab(global.ylab) +
xlab(global.xlab) +
ggtitle(names(aapl.logr))
# test stationarity
acfPlot(aapl.logr)
pacfPlot(aapl.logr)
adf.test(aapl.logr)
kpss.test(aapl.logr, null = "Trend")
kpss.test(aapl.logr, null = "Level")
pp.test(aapl.logr)
# Plot timeplot and ACF PACF Plots of Abs and Sq
acfPlot(abs(aapl.r))
# Plot timeplot and ACF PACF Plots of Abs and Sq
acfPlot(abs(aapl.logr))
pacfPlot(abs(aapl.logr))
acfPlot(aapl.logr^2)
pacfPlot(aapl.logr^2)
# QQ Plot
qqnorm(aapl.logr)
# Plot timeplot and ACF PACF Plots of Abs and Sq
par(mfrow=c(1,2))
acfPlot(abs(aapl.logr))
pacfPlot(abs(aapl.logr))
acfPlot(aapl.logr^2)
pacfPlot(aapl.logr^2)
# Plot timeplot and ACF PACF Plots of Abs and Sq
acfPlot(abs(aapl.logr))
pacfPlot(abs(aapl.logr))
acfPlot(aapl.logr^2)
pacfPlot(aapl.logr^2)
# QQ Plot
qqnorm(aapl.logr)
qqline(aapl.logr, col = 2)
dev.off()
# QQ Plot
qqnorm(aapl.logr)
qqline(aapl.logr)
skewness(aapl.logr) # -0.190054
kurtosis(aapl.logr) # 5.435621
qqline(aapl.logr, col=1)
qqline(aapl.logr, col=2)
qqline(aapl.logr, col=3)
qqline(aapl.logr, col=4)
qqline(aapl.logr, col=5)
qqline(aapl.logr, col=10)
qqline(aapl.logr, col=7)
qqline(aapl.logr)
skewness(aapl.logr) # -0.190054
?skewness
## ----- Split train/test set ----- ##
num_of_train <- (length(aapl.logr) - 30) %>% print()
aapl.logr.train <- head(aapl.logr, num_of_train)
aapl.logr.test <- tail(aapl.logr, round(length(aapl.logr) - num_of_train))
View(aapl.logr.test)
View(aapl.logr)
## ----- EACF ----- ##
eacf(aapl.logr)
eacf(abs(aapl.logr))
eacf(aapl.logr^2)
## ----- AUTO.ARIMA Forecast ----- ##
fit.aa313 <- auto.arima(aapl.logr.train) %>% print() #AIC = -17792.94
tsdiag(fit.aa313)
Box.test(fit.aa313$residuals, type="Ljung-Box")
pred.aa313 <- forecast(fit.aa313, h=length(aapl.c.test))
pred.aa313$mean
accuracy(pred.aa313, aapl.logr.test)
autoplot(pred.aa313)
pred.aa313 <- forecast(fit.aa313, h=length(aapl.logr.test))
pred.aa313$mean
accuracy(pred.aa313, aapl.logr.test)
autoplot(pred.aa313)
chart.Histogram(aapl.logr, methods = c("add.normal", "add.density"),
colorset=c("gray","red","blue"))
## ----- RUGARCH Fitting ----- ##
library(PerformanceAnalytics)
chart.Histogram(aapl.logr, methods = c("add.normal", "add.density"),
colorset=c("gray","red","blue"))
chart.Histogram(aapl.logr, methods = c("add.density"),
colorset=c("gray","red"))
chart.Histogram(aapl.logr, methods = c("add.density"),
colorset=c("gray","red"), ylim=0.6, main="Histogram of Log-returns*100")
chart.Histogram(aapl.logr, methods = c("add.density"),
colorset=c("gray","red"), ylim=1, main="Histogram of Log-returns*100")
chart.Histogram(aapl.logr, methods = c("add.density"),
colorset=c("gray","red"), main="Histogram of Log-returns*100")
## ----- EACF ----- ##
eacf(aapl.logr)
# test stationarity
acfPlot(aapl.logr)
pacfPlot(aapl.logr)
# test stationarity
acfPlot(aapl.logr)
### ----- Get data from Yahoo ----- ###
stockname <- 'AAPL'
stock.data <- getSymbols(stockname, from='2002-02-01', to='2017-02-01', src='yahoo', auto.assign = F)
stock.data <- na.omit(stock.data) # remove possible na values
chartSeries(stock.data, theme = "white", name = stockname)
aapl.c <- stock.data[,4] # extract close price
names(aapl.c) <- 'Apple Stock Closing Prices (2002.02-2017.02)'
### ----- Examine data ----- ###
# plot closing price
global.xlab <- 'Date (yyyy-mm-dd)'
global.ylab <- 'Closing Price ($)'
ggplot(aapl.c, aes(time(aapl.c), as.matrix(aapl.c))) + geom_line(colour = 'red') +
ylab(global.ylab) +
xlab(global.xlab) +
ggtitle(names(aapl.c))
# test stationarity
acfPlot(aapl.c)
pacfPlot(aapl.c)
pacfPlot(aapl.c)
adf.test(aapl.c)
kpss.test(aapl.c, null = "Trend")
kpss.test(aapl.c, null = "Level")
pp.test(aapl.c)
### ----- Data transformation ----- ###
# transform to log-returns
global.ylab <- 'Log-returns*100'
aapl.logr <- diff(log(aapl.c))*100
aapl.logr <- na.omit(aapl.logr) # remove possible na values
names(aapl.logr) <- 'Log-returns*100 on AAPL Closing Prices (2002.02-2017.02)'
ggplot(aapl.logr, aes(time(aapl.logr), as.matrix(aapl.logr))) + geom_line(colour = 'red') +
ylab(global.ylab) +
xlab(global.xlab) +
ggtitle(names(aapl.logr))
# test stationarity
acfPlot(aapl.logr)
pacfPlot(aapl.logr)
adf.test(aapl.logr)
kpss.test(aapl.logr, null = "Trend")
kpss.test(aapl.logr, null = "Level")
pp.test(aapl.logr)
# Plot timeplot and ACF PACF Plots of Abs and Sqrt
acfPlot(abs(aapl.logr))
# Plot timeplot and ACF PACF Plots of Abs and Sqrt
acfPlot(abs(aapl.logr), title="Abs(log-returns*100)")
?acfPlot
# Plot timeplot and ACF PACF Plots of Abs and Sqrt
acfPlot(abs(aapl.logr), main="Abs(log-returns*100)")
# Plot timeplot and ACF PACF Plots of Abs and Sqrt
acfPlot(abs(aapl.logr))
pacfPlot(abs(aapl.logr))
acfPlot(aapl.logr^2)
pacfPlot(aapl.logr^2)
# QQ Plot
qqnorm(aapl.logr)
qqline(aapl.logr)
skewness(aapl.logr) # -0.190054
kurtosis(aapl.logr) # 5.435621
chart.Histogram(aapl.logr, methods = c("add.density"),
colorset=c("gray","red"), main="Histogram of Log-returns*100")
## ----- Split train/test set ----- ##
num_of_train <- (length(aapl.logr) - 30) %>% print()
aapl.logr.train <- head(aapl.logr, num_of_train)
aapl.logr.test <- tail(aapl.logr, round(length(aapl.logr) - num_of_train))
## ----- EACF ----- ##
eacf(aapl.logr.train)
eacf(aapl.logr.train^2)
eacf(abs(aapl.logr.train))
### ----- Fitted Models ----- ###
arima.04 = arima(aapl.logr.train, order=c(0,4))
### ----- Fitted Models ----- ###
arma.04 = arma(aapl.logr.train, order=c(0,4))
AIC(arma.04) # 16806.18; -17926.01
summary(arma.04)
garch.11=garch(aapl.logr.train, order=c(1,1))
summary(garch.11)
AIC(garch.11) # 16205.51; -18554.31
tsdiag(arma.04)
summary(arma.04)
garch.11=garch(aapl.logr.train, order=c(1,1))
summary(garch.11)
AIC(garch.11)
garch.10=garch(aapl.logr.train, order=c(1,0))
summary(garch.10)
AIC(garch.10)
?arma
?garch
garch.10=garch(aapl.logr.train, order=c(0,1))
summary(garch.10)
AIC(garch.10)
### ----- Fitted Models ----- ###
arma.04 = arma(aapl.logr.train, order=c(0,4))
summary(arma.04)
garch.11=garch(aapl.logr.train, order=c(1,1))
summary(garch.11)
AIC(garch.11)
garch.10=garch(aapl.logr.train, order=c(0,1))
summary(garch.10)
garch.22=garch(aapl.logr.train, order=c(2,2))
summary(garch.22)
AIC(garch.22)
garch.21=garch(aapl.logr.train, order=c(1,2))
summary(garch.21)
AIC(garch.21)
garch.20=garch(aapl.logr.train, order=c(0,2))
summary(garch.20)
AIC(garch.20)
garch.33=garch(aapl.logr.train, order=c(3,3))
summary(garch.33)
AIC(garch.33)
garch.32=garch(aapl.logr.train, order=c(2,3))
summary(garch.32)
AIC(garch.32)
garch.31=garch(aapl.logr.train, order=c(1,3))
summary(garch.31)
AIC(garch.31)
garch.30=garch(aapl.logr.train, order=c(0,3))
summary(garch.30)
AIC(garch.30)
### ----- GARCH Diagnostic Checking ----- ###
plot(residuals(garch.11),type='h',ylab='Standardized Residuals', main='GARCH(1,1)')
## ----- AUTO.ARIMA Forecast ----- ##
fit.aa313 <- auto.arima(aapl.logr.train) %>% print() #AIC = -17792.94
accuracy(pred.aa313, aapl.logr.test)
autoplot(pred.aa313)
### ----- GARCH Diagnostic Checking ----- ###
plot(residuals(garch.11),type='h',ylab='Standardized Residuals', main='GARCH(1,1)')
qqnorm(residuals(garch.11)); qqline(residuals(garch.11))
tsdisplay(residuals(garch.11), lag.max = 40, main="GARCH(1,1)")
acfPlot(residuals(garch.11)^2)
acfPlot(residuals(garch.11)^2, na.action=na.omit)
pacfPlot(residuals(garch.11)^2, na.action=na.omit)
### ----- GARCH Diagnostic Checking ----- ###
plot(residuals(garch.11),type='h',ylab='Standardized Residuals', main='GARCH(1,1)')
qqnorm(residuals(garch.11)); qqline(residuals(garch.11))
acfPlot(residuals(garch.11)^2, na.action=na.omit)
gBox(garch.11,method='squared') # above p-value
tsdisplay(residuals(garch.11), lag.max = 40, main="GARCH(1,1)")
pred.garch11 <- predict(garch11, n.ahead = 30, plot=TRUE)
pred.garch11 <- predict(garch.11, n.ahead = 30, plot=TRUE)
View(pred.garch11)
accuracy(pred.garch.11$meanForecast, aapl.logr.test)
accuracy(pred.garch11$meanForecast, aapl.logr.test)
pred.garch11 <- predict(garch.11, n.ahead = 30, plot=TRUE)
pred.garch11 <- forecast(garch.11, n.ahead = 30, plot=TRUE)
pred.garch11 <- forecast(garch.11, h=30)
### ----- RUGARCH Fitting ----- ###
# Standard GARCH model with std
spec.sGarch11 <- ugarchspec(mean.model=list(armaOrder=c(0,0)),
variance.model=list(model="sGARCH", garchOrder=c(1,1)),
distribution.model = "std")
fit.sGarch11 <- ugarchfit(spec=spec.sGarch11, data=aapl.logr.train)
fit.sGarch11
likelihood(fit.sGarch11)   #9472.777
infocriteria(fit.sGarch11) #-5.015795
plot(fit.sGarch11, which="all")
# GJR GARCH model with std
spec.gjrGarch11 <- ugarchspec(mean.model=list(armaOrder=c(0,0)),
variance.model=list(model="gjrGARCH", garchOrder=c(1,1)),
distribution.model = "std")
fit.gjrGarch11 <- ugarchfit(spec=spec.gjrGarch11, data=aapl.r)
fit.gjrGarch11
likelihood(fit.gjrGarch11)
fit.gjrGarch11 <- ugarchfit(spec=spec.gjrGarch11, data=aapl.logr.train)
fit.gjrGarch11
likelihood(fit.gjrGarch11)
infocriteria(fit.gjrGarch11)
plot(fit.gjrGarch11, which="all")
# Exponential GARCH model with std
spec.eGarch11 <- ugarchspec(mean.model=list(armaOrder=c(0,0)),
variance.model=list(model = "eGARCH", garchOrder=c(1,1),
variance.targeting = FALSE),
distribution.model = "std")
fit.eGarch11 <- ugarchfit(spec=spec.eGarch11, data=aapl.logr.train)
fit.eGarch11
stdmsftret <- residuals(fit.eGarch11, standardize = TRUE)
likelihood(fit.eGarch11)
infocriteria(fit.eGarch11)
plot(fit.eGarch11, which="all")
## ----- RUGARCH Forecast ----- ##
# Make the predictions for the mean and vol for the next 30 days
garchforecast <- ugarchforecast(data = aapl.logr.train,
fitORspec = spec.eGarch11,
n.ahead = 30)
# N-roll
garchspec <- ugarchspec(mean.model=list(armaOrder=c(0,0)),
variance.model=list(model = "eGARCH", garchOrder=c(1,1)),
distribution.model = "std")
fta <- ugarchfit(garchspec, aapl.logr.train, out.sample=30)
fwdCast = ugarchforecast(fta, n.ahead=30, n.roll=30)
fwdCast
plot(fwdCast, which="all")
?ugarchforecast
fwdCast
View(fwdCast)
?ugarchspec
### ----- RUGARCH ----- ###
# Standard GARCH model with std
spec.sGarch11 <- ugarchspec(mean.model=list(armaOrder=c(0,0)),
variance.model=list(model="sGARCH", garchOrder=c(1,1)),
distribution.model = "std")
fit.sGarch11 <- ugarchfit(spec=spec.sGarch11, data=aapl.logr.train)
fit.sGarch11
fore.sGarch11 <- ugarchforecast(fit.sGarch11, n.ahead=30)
plot(fore.sGarch11)
fore.sGarch11 <- ugarchforecast(fit.sGarch11, n.ahead=30, n.roll=30)
plot(fore.sGarch11)
plot(fore.sGarch11, which="all")
fore.sGarch11 <- ugarchforecast(fit.sGarch11, n.ahead=30, n.roll=30)
### ----- RUGARCH ----- ###
# Standard GARCH model with std
spec.sGarch11 <- ugarchspec(mean.model=list(armaOrder=c(0,0)),
variance.model=list(model="sGARCH", garchOrder=c(1,1)),
distribution.model = "std")
fit.sGarch11 <- ugarchfit(spec=spec.sGarch11, data=aapl.logr.train, out.sample=30)
fit.sGarch11
likelihood(fit.sGarch11)
infocriteria(fit.sGarch11)
fore.sGarch11 <- ugarchforecast(fit.sGarch11, n.ahead=30, n.roll=30)
preds <- as.data.frame(fore.sGarch11)
View(fore.sGarch11)
fore.sGarch11@forecast
### ----- forecasting ----- ###
fit.garch11 <- garchFit(formula = ~garch(1, 1),
data = aapl.logr.train, trace = F, cond.dist = "std")
Box.test(residuals(fit.garch11), type="Ljung-Box")
plot(fit.garch11, which=3)  #Series with 2 Conditional SD Superimposed
plot(fit.garch11, which=13)  #QQ Plot
pred.garch11 <- predict(fit.garch11, n.ahead = 30, plot=TRUE)
accuracy(pred.garch11$meanForecast, aapl.logr.test)
### ----- forecasting ----- ###
fit.garch11 <- garchFit(formula = ~garch(1, 1),
data = aapl.logr.train, trace = F, cond.dist = "std")
Box.test(residuals(fit.garch11), type="Ljung-Box")
plot(fit.garch11, which=3)  #Series with 2 Conditional SD Superimposed
plot(fit.garch11, which=13)  #QQ Plot
pred.garch11 <- predict(fit.garch11, n.ahead = 30, plot=TRUE)
accuracy(pred.garch11$meanForecast, aapl.logr.test)
fit.garch22 <- garchFit(formula = ~garch(2, 2),
data = aapl.logr.train, trace = F, cond.dist = "std")
pred.garch22 <- predict(fit.garch22, n.ahead = 30, plot=TRUE)
accuracy(pred.garch22$meanForecast, aapl.logr.test)
fit.garch33 <- garchFit(formula = ~garch(3, 3),
data = aapl.logr.train, trace = F, cond.dist = "std")
pred.garch33 <- predict(fit.garch33, n.ahead = 30, plot=TRUE)
accuracy(pred.garch33$meanForecast, aapl.logr.test)
pred.garch11 <- predict(fit.garch11, n.ahead = 30, plot=TRUE)
